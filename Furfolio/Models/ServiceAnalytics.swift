//
//  ServiceAnalytics.swift
//  Furfolio
//
//  Centralized analytics for appointment-based service metrics.

import Foundation

struct ServiceAnalytics {
    /// Returns the number of appointments per service type.
    static func frequency(of appointments: [Appointment]) -> [Appointment.ServiceType: Int] {
        Dictionary(grouping: appointments, by: \..serviceType)
            .mapValues { $0.count }
    }

    /// Returns the average duration (in minutes) per service type.
    static func averageDuration(for appointments: [Appointment]) -> [Appointment.ServiceType: Double] {
        var results: [Appointment.ServiceType: Double] = [:]

        for type in Appointment.ServiceType.allCases {
            let filtered = appointments.filter { $0.serviceType == type && $0.durationMinutes != nil }
            let durations = filtered.compactMap { $0.durationMinutes }
            if !durations.isEmpty {
                let average = Double(durations.reduce(0, +)) / Double(durations.count)
                results[type] = average
            }
        }
        return results
    }

    /// Returns total revenue generated by each service type.
    static func revenueByServiceType(for appointments: [Appointment], charges: [Charge]) -> [Appointment.ServiceType: Double] {
        var mapping: [Appointment: Appointment.ServiceType] = [:]
        for appointment in appointments {
            mapping[appointment] = appointment.serviceType
        }

        var results: [Appointment.ServiceType: Double] = [:]

        for charge in charges {
            if let appointment = charge.appointment, let type = mapping[appointment] {
                results[type, default: 0] += charge.amount
            }
        }

        return results
    }
}
